package rtf

func listAsSet(list []string) map[string]bool {
	set := make(map[string]bool)
	for _, k := range list {
		set[k] = true
	}
	return set
}

func IgnoreList() []string {
	return []string{
		"aftncn",
		"aftnsep",
		"aftnsepc",
		"annotation",
		"atnauthor",
		"atndate",
		"atnicn",
		"atnid",
		"atnparent",
		"atnref",
		"atntime",
		"atrfend",
		"atrfstart",
		"author",
		"background",
		"bkmkend",
		"bkmkstart",
		"blipuid",
		"buptim",
		"category",
		"colorschememapping",
		"colortbl",
		"comment",
		"company",
		"creatim",
		"datafield",
		"datastore",
		"defchp",
		"defpap",
		"do",
		"doccomm",
		"docvar",
		"dptxbxtext",
		"ebcend",
		"ebcstart",
		"factoidname",
		"falt",
		"fchars",
		"ffdeftext",
		"ffentrymcr",
		"ffexitmcr",
		"ffformat",
		"ffhelptext",
		"ffl",
		"ffname",
		"ffstattext",
		"field",
		"file",
		"filetbl",
		"fldinst",
		"fldrslt",
		"fldtype",
		"fname",
		"fontemb",
		"fontfile",
		"fonttbl",
		"footer",
		"footerf",
		"footerl",
		"footerr",
		"footnote",
		"formfield",
		"ftncn",
		"ftnsep",
		"ftnsepc",
		"g",
		"generator",
		"gridtbl",
		"header",
		"headerf",
		"headerl",
		"headerr",
		"hl",
		"hlfr",
		"hlinkbase",
		"hlloc",
		"hlsrc",
		"hsv",
		"htmltag",
		"info",
		"keycode",
		"keywords",
		"latentstyles",
		"lchars",
		"levelnumbers",
		"leveltext",
		"lfolevel",
		"linkval",
		"list",
		"listlevel",
		"listname",
		"listoverride",
		"listoverridetable",
		"listpicture",
		"liststylename",
		"listtable",
		"listtext",
		"lsdlockedexcept",
		"macc",
		"maccPr",
		"mailmerge",
		"maln",
		"malnScr",
		"manager",
		"margPr",
		"mbar",
		"mbarPr",
		"mbaseJc",
		"mbegChr",
		"mborderBox",
		"mborderBoxPr",
		"mbox",
		"mboxPr",
		"mchr",
		"mcount",
		"mctrlPr",
		"md",
		"mdeg",
		"mdegHide",
		"mden",
		"mdiff",
		"mdPr",
		"me",
		"mendChr",
		"meqArr",
		"meqArrPr",
		"mf",
		"mfName",
		"mfPr",
		"mfunc",
		"mfuncPr",
		"mgroupChr",
		"mgroupChrPr",
		"mgrow",
		"mhideBot",
		"mhideLeft",
		"mhideRight",
		"mhideTop",
		"mhtmltag",
		"mlim",
		"mlimloc",
		"mlimlow",
		"mlimlowPr",
		"mlimupp",
		"mlimuppPr",
		"mm",
		"mmaddfieldname",
		"mmath",
		"mmathPict",
		"mmathPr",
		"mmaxdist",
		"mmc",
		"mmcJc",
		"mmconnectstr",
		"mmconnectstrdata",
		"mmcPr",
		"mmcs",
		"mmdatasource",
		"mmheadersource",
		"mmmailsubject",
		"mmodso",
		"mmodsofilter",
		"mmodsofldmpdata",
		"mmodsomappedname",
		"mmodsoname",
		"mmodsorecipdata",
		"mmodsosort",
		"mmodsosrc",
		"mmodsotable",
		"mmodsoudl",
		"mmodsoudldata",
		"mmodsouniquetag",
		"mmPr",
		"mmquery",
		"mmr",
		"mnary",
		"mnaryPr",
		"mnoBreak",
		"mnum",
		"mobjDist",
		"moMath",
		"moMathPara",
		"moMathParaPr",
		"mopEmu",
		"mphant",
		"mphantPr",
		"mplcHide",
		"mpos",
		"mr",
		"mrad",
		"mradPr",
		"mrPr",
		"msepChr",
		"mshow",
		"mshp",
		"msPre",
		"msPrePr",
		"msSub",
		"msSubPr",
		"msSubSup",
		"msSubSupPr",
		"msSup",
		"msSupPr",
		"mstrikeBLTR",
		"mstrikeH",
		"mstrikeTLBR",
		"mstrikeV",
		"msub",
		"msubHide",
		"msup",
		"msupHide",
		"mtransp",
		"mtype",
		"mvertJc",
		"mvfmf",
		"mvfml",
		"mvtof",
		"mvtol",
		"mzeroAsc",
		"mzeroDesc",
		"mzeroWid",
		"nesttableprops",
		"nextfile",
		"nonesttables",
		"objalias",
		"objclass",
		"objdata",
		"object",
		"objname",
		"objsect",
		"objtime",
		"oldcprops",
		"oldpprops",
		"oldsprops",
		"oldtprops",
		"oleclsid",
		"operator",
		"panose",
		"password",
		"passwordhash",
		"pgp",
		"pgptbl",
		"picprop",
		"pict",
		"pn",
		"pnseclvl",
		"pntext",
		"pntxta",
		"pntxtb",
		"printim",
		"private",
		"propname",
		"protend",
		"protstart",
		"protusertbl",
		"pxe",
		"result",
		"revtbl",
		"revtim",
		"rsidtbl",
		"rxe",
		"shp",
		"shpgrp",
		"shpinst",
		"shppict",
		"shprslt",
		"shptxt",
		"sn",
		"sp",
		"staticval",
		"stylesheet",
		"subject",
		"sv",
		"svb",
		"tc",
		"template",
		"themedata",
		"title",
		"txe",
		"ud",
		"upr",
		"userprops",
		"wgrffmtfilter",
		"windowcaption",
		"writereservation",
		"writereservhash",
		"xe",
		"xform",
		"xmlattrname",
		"xmlattrvalue",
		"xmlclose",
		"xmlname",
		"xmlnstbl",
		"xmlopen",
	}
}

func PlainTextRules() RuleSet {
	return RuleSet{
		"par":       As("\n"),
		"sect":      As("\n\n"),
		"page":      As("\n\n"),
		"line":      As("\n"),
		"tab":       As("\t"),
		"emdash":    As("\u2014"),
		"endash":    As("\u2013"),
		"emspace":   As("\u2013"),
		"enspace":   As("\u2002"),
		"qmspace":   As("\u2005"),
		"bullet":    As("\u2022"),
		"lquote":    As("\u2018"),
		"rquote":    As("\u2019"),
		"ldblquote": As("\u201C"),
		"rdblquote": As("\u201D"),
	}
}

func HTMLRules() RuleSet {
	return RuleSet{
		"par":  As("<br>\n"),
		"sect": As("<br><br>\n"),
		"page": As("<br><br>\n"),
		"line": As("<br>\n"),
		"b":    Toggle("<b>", "</b>"),
		"ul":   Toggle("<u>", "</u>"),
	}
}
